jQuery(document).ready(function PwrStatus(){
        var PD = "0";
        var PD12 = "0";
        var P5V = "1";
        var EXT = "0";
        var ExtStatus = "0";
        if (PD == "1")
          $("#PDnao").hide();
        else if (PD == "0")
          $("#PDsim").hide();
        if (PD12 == "1")
          $("#PD12nao").hide();
        else if (PD12 == "0")
          $("#PD12sim").hide();
        if (P5V == "1")
          $("#5nao").hide();
        else if (P5V == "0")
          $("#5sim").hide();  
        if (EXT == "1")
          $("#EXTnao").hide();
        else if (EXT == "0")
          $("#EXTsim").hide();
        if (ExtStatus == "1")
           document.getElementById("EXTpower").value = "1";
        else if (ExtStatus == "0")
           document.getElementById("EXTpower").value = "0";

const alert1 = document.getElementById('USBPwrDel');
const appendAlert1 = (message, type) => {
  const wrapper = document.createElement('div');
  wrapper.innerHTML = [
    `<div class="alert alert-${type} alert-dismissible alert-danger" role="alert">`,
    `   <strong>Sua fonte de alimentação não é um USB Power Delivery!</strong>`,
    '</div>'
  ].join('');
  alert1.append(wrapper);
};
const checkVariableAndTriggerAlert = () => {
  if (PD == 0) {
    appendAlert1();
  }
};
checkVariableAndTriggerAlert();

const alert2 = document.getElementById('T12V');
const appendAlert2 = (message, type) => {
  const wrapper2 = document.createElement('div');
  wrapper2.innerHTML = [
    `<div class="alert alert-${type} alert-dismissible alert-danger" role="alert">`,
    `   <strong>12v</strong>`,
    '</div>'
  ].join('');
  alert2.append(wrapper2);
};
const checkVariableAndTriggerAlert2 = () => {
  if (PD12 == 0) {
    appendAlert2();
  }
};
checkVariableAndTriggerAlert2();
});
      jQuery(function WiFi(){
        var Wstat = "2";
        switch(Wstat){
          case "0": 
            document.getElementById("WifiStatus").innerHTML="WiFi Parado";
            break;
          case "1": 
            document.getElementById("WifiStatus").innerHTML="Nenhum SSID Disponivel";
            break;
          case "2": 
            document.getElementById("WifiStatus").innerHTML="Procura Completada";
            break;
          case "3": 
            document.getElementById("WifiStatus").innerHTML="WiFi Conectado"; 
            break;
          case "4": 
            document.getElementById("WifiStatus").innerHTML="Conexão Falhou";
            break;
          case "5": 
            document.getElementById("WifiStatus").innerHTML="Conexão Perdida";
            break;
          case "6": 
            document.getElementById("WifiStatus").innerHTML="WiFi Desconectado";
            break;
        }
      });
        jQuery(function ModoEmUso(){
          var ModoUso = "0";
          switch(ModoUso){
            case "1":
              $("#EmUsoClient").hide();
              $("#EmUsoSource").hide();
              $("#EmUsoLocal").hide();
            break;
            case "2":
              $("#EmUsoSerial").hide();
              $("#EmUsoSource").hide();
              $("#EmUsoLocal").hide();
            break;
            case "3":
              $("#EmUsoSerial").hide();
              $("#EmUsoClient").hide();
              $("#EmUsoLocal").hide();
            break;
            case "4":
              $("#EmUsoSerial").hide();
              $("#EmUsoClient").hide();
              $("#EmUsoSource").hide();
            break;
            default:
              $("#EmUsoSerial").hide();
              $("#EmUsoClient").hide();
              $("#EmUsoSource").hide();
              $("#EmUsoLocal").hide();
          }    
        });
 
function SolicitaMNTP(){
  var NunberOfMNTP = 9;
  var TABLE = ["TEST0","TEST1","TEST2","TEST3","TEST4","TEST5","TEST6","TEST7","TEST8","TEST9"];
  var select = document.getElementById('MNTPClient');
    for (var i = 0; i <=NunberOfMNTP; i++){
      var opt = document.createElement("option");
      opt.value = i;
      opt.innerHTML = TABLE[i];
      select.appendChild(opt);
    }
}

const optionPosition = {
  enableHighAccuracy: true,
  timeout: 100000,
};

function getlocation(){
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(showPosition,errorPosition,optionPosition);
  } else { 
    alert("Geolocalização não suportada pelo navegador!");
  }
}
function showPosition(position){
  var accuracy = document.createElement("p");
  accuracy.innerHTML = "Precisão da localização = " + position.coords.accuracy + " metros";
  document.getElementById("latitude").value = position.coords.latitude;
  document.getElementById("longitude").value = position.coords.longitude;
  document.getElementById("precisao").appendChild(accuracy);
}
function errorPosition(error){
  alert("Erro requisitando a posição do navegador verifique se a permissão de localização está habilitada!");
}
// When the user clicks on <div>, open the popup
function PopUp() {
  var popup = document.getElementById("myPopup");
  popup.classList.toggle("show");
}


var liberacao;
var qtdTentativas = 0;
	
	// Função main é executada ao navegador terminar de carregar a página
	function main() {
		liberacao = false;
		let divTable = document.getElementById("divTable");
		let divTitulo = document.getElementById("divTitulo");

		let body = document.body;
		let html = document.documentElement;
		let heightScreen = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);

		divTable.style.height = heightScreen - (divTitulo.offsetHeight + 16 + 2) + "px";

		var modalInfo = document.getElementById('modal-info');
		modalInfo.addEventListener('show.bs.modal', function (event) {

			let button = event.relatedTarget;

			let ssid = decodeURI(button.getAttribute('data-bs-ssid'));
			let bssid = decodeURI(button.getAttribute('data-bs-bssid'));
			let canal = decodeURI(button.getAttribute('data-bs-canal'));
			let encriptacao = decodeURI(button.getAttribute('data-bs-encriptacao'));

			let modalTitle = modalInfo.querySelector('.modal-title');
			let modalBssid = modalInfo.querySelector('.modal-body #bssid');
			let modalCanal = modalInfo.querySelector('.modal-body #canal');
			let modalEncriptacao = modalInfo.querySelector('.modal-body #encriptacao');

			modalTitle.textContent = "Mais dados sobre a rede " + ssid;
			modalBssid.textContent = bssid;
			modalCanal.textContent = canal;
			modalEncriptacao.textContent = encriptacao;

		}); // ao ser exibido as informações extras na tela, é substituído os valores padrão pelos valores da rede selecionada

		liberacao = true;
		document.getElementById("reload").setAttribute('disabled', '');
		document.getElementById("spinner-reload").style.display = '';
		removeTodasLinhaTable();
	}

	function adicionaLinhaTable(ssid, rssi, bssid, canal, encriptacao) // para cada rede WiFi, é adicionada uma linha na tabela
	{

		let elementoPai = document.getElementById("elementoPai");
		elementoPai.innerHTML += `
			<tr>
				<td>${ssid}</td>
				<td>${rssi}</td>
				<td>
					<button class="btn btn-primary" type="button" data-bs-toggle="modal" data-bs-target="#modal-info" data-bs-ssid=${encodeURI(ssid)} data-bs-bssid=${encodeURI(bssid)} data-bs-canal=${encodeURI(canal)} data-bs-encriptacao=${encodeURI(encriptacao)}>
						<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24" fill="none">
							<path fill-rule="evenodd" clip-rule="evenodd" d="M5 15C6.65685 15 8 13.6569 8 12C8 10.3431 6.65685 9 5 9C3.34315 9 2 10.3431 2 12C2 13.6569 3.34315 15 5 15ZM5 13C5.55228 13 6 12.5523 6 12C6 11.4477 5.55228 11 5 11C4.44772 11 4 11.4477 4 12C4 12.5523 4.44772 13 5 13Z" fill="currentColor"></path>
							<path fill-rule="evenodd" clip-rule="evenodd" d="M12 15C13.6569 15 15 13.6569 15 12C15 10.3431 13.6569 9 12 9C10.3431 9 9 10.3431 9 12C9 13.6569 10.3431 15 12 15ZM12 13C12.5523 13 13 12.5523 13 12C13 11.4477 12.5523 11 12 11C11.4477 11 11 11.4477 11 12C11 12.5523 11.4477 13 12 13Z" fill="currentColor"></path>
							<path fill-rule="evenodd" clip-rule="evenodd" d="M22 12C22 13.6569 20.6569 15 19 15C17.3431 15 16 13.6569 16 12C16 10.3431 17.3431 9 19 9C20.6569 9 22 10.3431 22 12ZM20 12C20 12.5523 19.5523 13 19 13C18.4477 13 18 12.5523 18 12C18 11.4477 18.4477 11 19 11C19.5523 11 20 11.4477 20 12Z" fill="currentColor"></path>
						</svg>
					</button>
				</td>
			</tr>
			`;

	}

	function removeTodasLinhaTable() // remove todas as linhas da tabela de redes
	{
		let elementoPai = document.getElementById("elementoPai");
		elementoPai.innerHTML = "";
	}

	function getContent(url) // obtém o conteúdo de um url (no caso deste sistema, é obtido o conteúdo da página "/scan")
	{
		var xhr = new XMLHttpRequest();
		xhr.open('GET', url, true);
		xhr.onload = function (e) {
			if (xhr.readyState === 4) {
				if (xhr.status === 200) {
					if (xhr.responseText == "[]" || xhr.responseText == undefined) {
						qtdTentativas++;
						if (qtdTentativas < 5) {
							liberacao = true;
						}
					} else {
						removeTodasLinhaTable();
						qtdTentativas = 0;
						document.getElementById("reload").removeAttribute('disabled');
						document.getElementById("spinner-reload").style.display = 'none';
						 
						// Realizar todo procedimento aqui
						let json = xhr.responseText;
						json = JSON.parse(json);
						let tempo = new Date(Date.now());
						if (json.length != 0) {
							document.getElementById("tempoDoDadoObtido").innerHTML = `Dados obtidos em <strong>${tempo.getDate()}/${tempo.getMonth() + 1}/${tempo.getFullYear()}</strong> às <strong>${tempo.getHours()}:${tempo.getMinutes()}:${tempo.getSeconds()}</strong>`;
						} else {
							document.getElementById("tempoDoDadoObtido").innerHTML = `Dados obtidos em <strong>--/--/----</strong> às <strong>--:--:--</strong>`;
						}
								for (var i = 0; i < json.length; i++) {
							let secure = json[i].secure;

							// O tipo de encriptação é enviada por um número, que deve ser substituído para uma frase legível por humano
							switch (secure) {
								case 0:
									secure = "Aberta";
									break;
								case 1:
									secure = "WEP";
									break;
								case 2:
									secure = "WPA_PSK";
									break;
								case 3:
									secure = "WPA2_PSK";
									break;
								case 4:
									secure = "WPA_WPA2_PSK";
									break;
								case 5:
									secure = "WPA2_ENTERPRISE";
									break;
								case 6:
									secure = "WIFI_AUTH_MAX";
									break;
							}

							adicionaLinhaTable(String(json[i].ssid), String(json[i].rssi), String(json[i].bssid), String(json[i].channel), secure);
						}
					}
				} else {
					qtdTentativas++;
					if (qtdTentativas < 5) {
						liberacao = true;
					}
				}
				if (qtdTentativas >= 5) // se o número de tentativas de obtenção das redes disponíveis for maior que 5, é mostrado uma mensagem de erro
				{
					liberacao = false;
					document.getElementById("headerModalError").innerText = "Erro: Requisição falha";
					document.getElementById("bodyModalError").innerText = "A requisição HTTP falhou. Tente novamente após verificar a conexão elétrica do ESP32";
					var myModal = new bootstrap.Modal(document.getElementById('modal-error')).show();
					qtdTentativas = 0;
					document.getElementById("reload").removeAttribute('disabled');
					document.getElementById("spinner-reload").style.display = 'none';
					removeTodasLinhaTable();
				}
				
			}
		};
		xhr.onerror = function (e) // se houver qualquer erro na requisição, também é mostrado em uma mensagem de erro
		{
			liberacao = false;
			document.getElementById("headerModalError").innerText = "Erro: Requisição falha";
			document.getElementById("bodyModalError").innerText = "A requisição HTTP falhou. Tente novamente após verificar a conexão elétrica do ESP32";
			var myModal = new bootstrap.Modal(document.getElementById('modal-error')).show();
			qtdTentativas = 0;
			document.getElementById("reload").removeAttribute('disabled');
			document.getElementById("spinner-reload").style.display = 'none';
			removeTodasLinhaTable();
		};
		xhr.send(null);
	}

	setInterval(verificacao, 100);
	setInterval(autoBusca, 10000); // a cada 10 segundos, uam nova requsiiçaõ é efetuada

	document.getElementById("reload").addEventListener('click', function (event) // ao ser clicado no botão de requisitar as redes disponíveis manualmente, é executado o processo de obtenção
	{
		document.getElementById("reload").setAttribute('disabled', '');
		document.getElementById("spinner-reload").style.display = '';
		liberacao = true;
	});

	function verificacao() {
		if (liberacao == true && $.fn.modal) // se poder fazer uam requisição E a biblioteca bootstrap tiver sido carregada completamente, é executado o processo de preenchiemnto da tabela
		{
			liberacao = false;
			preencheTable();
		}
	}

	function autoBusca(){
		liberacao = true;
	}



	function preencheTable() // preenche a tabela com os dados das redes disponíveis
	{
		getContent("/scan");		
	}

	window.onload = main(); // ao ser carregado a página, é executada a função main()